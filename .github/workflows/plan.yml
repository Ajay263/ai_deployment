name: 'Terraform Plan'

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'terragrunt.hcl'
      - '.github/workflows/plan.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./environments/${{ matrix.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
        role-session-name: GitHubActions-TerraformPlan

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5
        terraform_wrapper: false

    - name: Setup Terragrunt
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.55.1/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt --version

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          **/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terragrunt Init
      run: |
        terragrunt init --terragrunt-non-interactive
      env:
        TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

    - name: Generate Terraform files
      run: |
        terragrunt init --terragrunt-non-interactive
        echo "Generated files:"
        ls -la *.tf

    - name: Format check (skip generated files)
      run: |
        # Format all .tf files except generated ones
        terraform fmt -check -diff -recursive ../../modules/ || {
          echo "‚ùå Terraform files are not properly formatted in modules/"
          echo "Run 'terraform fmt -recursive modules/' to fix formatting issues"
          exit 1
        }
        
        # Format check for main.tf, variables.tf, outputs.tf (user-created files)
        for file in main.tf variables.tf outputs.tf; do
          if [ -f "$file" ]; then
            terraform fmt -check -diff "$file" || {
              echo "‚ùå $file is not properly formatted"
              echo "Run 'terraform fmt $file' to fix formatting issues"
              exit 1
            }
          fi
        done
        
        echo "‚úÖ All user-created Terraform files are properly formatted"

    - name: Validate Terraform
      run: |
        terraform validate
        echo "‚úÖ Terraform configuration is valid"

    - name: Terragrunt Plan
      id: plan
      run: |
        terragrunt plan \
          -detailed-exitcode \
          -no-color \
          -out=tfplan \
          --terragrunt-non-interactive 2>&1 | tee plan_output.txt
        
        # Capture the exit code
        PLAN_EXIT_CODE=${PIPESTATUS[0]}
        echo "plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
        
        # Process the plan output for PR comment
        if [ $PLAN_EXIT_CODE -eq 0 ]; then
          echo "plan_result=no-changes" >> $GITHUB_OUTPUT
          echo "‚úÖ No changes detected"
        elif [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "plan_result=changes" >> $GITHUB_OUTPUT
          echo "üìã Changes detected"
        else
          echo "plan_result=error" >> $GITHUB_OUTPUT
          echo "‚ùå Plan failed with exit code $PLAN_EXIT_CODE"
          exit $PLAN_EXIT_CODE
        fi
      continue-on-error: true

    - name: Generate Plan Summary
      if: always()
      run: |
        cat > plan_summary.md << 'EOF'
        ## üèóÔ∏è Terraform Plan Results for `${{ matrix.environment }}`
        
        **Environment:** `${{ matrix.environment }}`  
        **Triggered by:** ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.number) || 'Manual workflow dispatch' }}
        
        EOF
        
        if [ "${{ steps.plan.outputs.plan_result }}" = "no-changes" ]; then
          cat >> plan_summary.md << 'EOF'
        ### ‚úÖ No Changes
        
        No infrastructure changes detected.
        
        EOF
        elif [ "${{ steps.plan.outputs.plan_result }}" = "changes" ]; then
          cat >> plan_summary.md << 'EOF'
        ### üìã Changes Detected
        
        <details>
        <summary><strong>View Plan Output</strong></summary>
        
        ```hcl
        EOF
          cat plan_output.txt >> plan_summary.md
          cat >> plan_summary.md << 'EOF'
        ```
        
        </details>
        
        EOF
        else
          cat >> plan_summary.md << 'EOF'
        ### ‚ùå Plan Failed
        
        <details>
        <summary><strong>View Error Output</strong></summary>
        
        ```
        EOF
          cat plan_output.txt >> plan_summary.md
          cat >> plan_summary.md << 'EOF'
        ```
        
        </details>
        
        EOF
        fi
        
        cat >> plan_summary.md << 'EOF'
        
        ---
        
        **Plan Summary:**
        - **Format Check:** ‚úÖ Passed
        - **Validation:** ‚úÖ Passed  
        - **Plan Status:** ${{ steps.plan.outputs.plan_result == 'no-changes' && '‚úÖ No Changes' || steps.plan.outputs.plan_result == 'changes' && 'üìã Changes Detected' || '‚ùå Failed' }}
        
        <sub>Plan generated at $(date -u '+%Y-%m-%d %H:%M:%S UTC') | Workflow: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>
        EOF

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './environments/${{ matrix.environment }}/plan_summary.md';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Terraform Plan Results for `${{ matrix.environment }}`')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
          }

    - name: Upload Plan Artifact
      if: steps.plan.outputs.plan_result == 'changes'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: |
          ./environments/${{ matrix.environment }}/tfplan
          ./environments/${{ matrix.environment }}/plan_output.txt
        retention-days: 30

    - name: Check Plan Status
      if: steps.plan.outputs.plan_exit_code != '0' && steps.plan.outputs.plan_exit_code != '2'
      run: |
        echo "‚ùå Terraform plan failed with exit code ${{ steps.plan.outputs.plan_exit_code }}"
        exit 1