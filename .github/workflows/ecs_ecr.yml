name: AI Deployment CI/CD Pipeline

on:
  push:
    branches:
      - "main"
      - "dev"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1

jobs:
  # Code Quality and Security Checks
  Code-Quality-checks:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: 'npm'
          cache-dependency-path: 'modules/app/apps/ui/package.json'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # generated at https://sonarcloud.io/account/security
          SONAR_HOST_URL: https://sonarcloud.io      # or define via ${{ vars.SONAR_HOST_URL }} 

      - name: Install Python Dependencies for API
        working-directory: modules/app/apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Run Python Tests and Linting
        working-directory: modules/app/apps/api
        run: |
          # Run linting
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
          # Run tests with coverage (if test files exist)
          if [ -f "test_app.py" ] || [ -d "tests" ]; then
            pytest --cov=. --cov-report=xml
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Install UI Dependencies
        working-directory: modules/app/apps/ui
        run: |
          if [ -f "package.json" ]; then
            npm install
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Download OWASP Dependency Check
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check.zip -d dependency-check-dir
          ls dependency-check-dir
          chmod +x dependency-check-dir/dependency-check/bin/dependency-check.sh

      - name: Run OWASP Dependency Check
        run: |
          dependency-check-dir/dependency-check/bin/dependency-check.sh \
            --project "AI-Deployment" \
            --scan modules/app/apps/ \
            --format "XML" \
            --format "HTML" \
            --disableYarnAudit \
            --disableNodeAudit \
            --disableAssembly \
            --exclude "**/node_modules/**" \
            --exclude "**/__pycache__/**" \
            --exclude "**/*.pyc"

      - name: Upload OWASP Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: |
            dependency-check-report.xml
            dependency-check-report.html

      - name: Trivy FS Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "modules/app/apps/"
          output: "trivyfs.txt"
          severity: "HIGH,CRITICAL"
          exit-code: "0"
          format: "table"

      - name: Upload Trivy FS Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-scan
          path: trivyfs.txt

      - name: Check if should deploy
        id: check-deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and Deploy API Service
  build-and-deploy-api:
    needs: Code-Quality-checks
    if: needs.Code-Quality-checks.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      api-image-uri: ${{ steps.build-api.outputs.image-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR Registry
        run: |
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: Get API version
        id: get-api-version
        working-directory: modules/app/apps/api
        run: |
          # Use git commit hash as version if no VERSION file
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.$(echo $GITHUB_SHA | cut -c1-7)"
          fi
          echo "Current API version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build API Docker image
        id: build-api
        working-directory: modules/app/apps/api
        run: |
          IMAGE_TAG="${{ env.ECR_REGISTRY }}/api:${{ steps.get-api-version.outputs.version }}"
          echo "Building API image: $IMAGE_TAG"
          
          docker build -t $IMAGE_TAG .
          docker tag $IMAGE_TAG ${{ env.ECR_REGISTRY }}/api:latest
          
          echo "image-uri=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan API image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-api.outputs.image-uri }}
          format: "table"
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 0  # Don't fail on vulnerabilities for now

      - name: Push API Docker image
        run: |
          docker push ${{ env.ECR_REGISTRY }}/api:${{ steps.get-api-version.outputs.version }}
          docker push ${{ env.ECR_REGISTRY }}/api:latest

  # Build and Deploy UI Service
  build-and-deploy-ui:
    needs: Code-Quality-checks
    if: needs.Code-Quality-checks.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      ui-image-uri: ${{ steps.build-ui.outputs.image-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR Registry
        run: |
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: Get UI version
        id: get-ui-version
        working-directory: modules/app/apps/ui
        run: |
          # Use git commit hash as version if no VERSION file
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.$(echo $GITHUB_SHA | cut -c1-7)"
          fi
          echo "Current UI version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build UI Docker image
        id: build-ui
        working-directory: modules/app/apps/ui
        run: |
          IMAGE_TAG="${{ env.ECR_REGISTRY }}/ui:${{ steps.get-ui-version.outputs.version }}"
          echo "Building UI image: $IMAGE_TAG"
          
          # Get ALB DNS name for backend URL (you might want to make this configurable)
          BACKEND_URL="${{ secrets.ALB_DNS_NAME || 'localhost:5000' }}"
          
          docker build -t $IMAGE_TAG --build-arg backend_url=$BACKEND_URL .
          docker tag $IMAGE_TAG ${{ env.ECR_REGISTRY }}/ui:latest
          
          echo "image-uri=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan UI image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-ui.outputs.image-uri }}
          format: "table"
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 0  # Don't fail on vulnerabilities for now

      - name: Push UI Docker image
        run: |
          docker push ${{ env.ECR_REGISTRY }}/ui:${{ steps.get-ui-version.outputs.version }}
          docker push ${{ env.ECR_REGISTRY }}/ui:latest

  # Deploy to ECS using Terraform
  deploy-to-ecs:
    needs: [build-and-deploy-api, build-and-deploy-ui]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5"

      - name: Set environment for Terraform workspace
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "TF_WORKSPACE=prod" >> $GITHUB_ENV
            echo "TF_BACKEND_CONFIG=prod.s3.tfbackend" >> $GITHUB_ENV
          else
            echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
            echo "TF_BACKEND_CONFIG=dev.s3.tfbackend" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: |
          terraform init -backend-config=${{ env.TF_BACKEND_CONFIG }}

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="groq_api_key=${{ secrets.GROQ_API_KEY }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="environment=${{ env.TF_WORKSPACE }}" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan

      - name: Get ECS Service Status
        run: |
          # Wait for services to be stable
          aws ecs wait services-stable \
            --cluster mtc-ecs-cluster \
            --services api-service ui-service \
            --region ${{ env.AWS_REGION }} || true

      - name: Update ECS Services with New Images
        run: |
          # Force new deployment to pick up new images
          aws ecs update-service \
            --cluster mtc-ecs-cluster \
            --service api-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          aws ecs update-service \
            --cluster mtc-ecs-cluster \
            --service ui-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for Deployment to Complete
        run: |
          echo "Waiting for services to stabilize..."
          aws ecs wait services-stable \
            --cluster mtc-ecs-cluster \
            --services api-service ui-service \
            --region ${{ env.AWS_REGION }}

      - name: Get Application URL
        run: |
          # Get ALB DNS name
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "🚀 Application deployed successfully!"
          echo "📱 Application URL: $ALB_DNS"
          echo "📊 Monitoring Dashboard: $(terraform output -raw monitoring_dashboard_url)"

  # Health Check
  health-check:
    needs: deploy-to-ecs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform (for outputs)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5"

      - name: Terraform Init
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            terraform init -backend-config=prod.s3.tfbackend
          else
            terraform init -backend-config=dev.s3.tfbackend
          fi

      - name: Health Check API
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          
          echo "Performing health checks..."
          
          # Wait a bit for services to be ready
          sleep 30
          
          # Check API health
          echo "Checking API health..."
          API_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS/api/healthcheck || echo "000")
          
          if [ "$API_HEALTH" == "200" ]; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed (HTTP $API_HEALTH)"
          fi
          
          # Check UI
          echo "Checking UI..."
          UI_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://$ALB_DNS/ || echo "000")
          
          if [ "$UI_HEALTH" == "200" ]; then
            echo "✅ UI health check passed"
          else
            echo "❌ UI health check failed (HTTP $UI_HEALTH)"
          fi
          
          # Summary
          echo "🏥 Health Check Summary:"
          echo "API: HTTP $API_HEALTH"
          echo "UI: HTTP $UI_HEALTH"
          echo "Application URL: http://$ALB_DNS"

  # Cleanup on failure
  cleanup-on-failure:
    needs: [deploy-to-ecs]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup on failure
        run: |
          echo "🧹 Deployment failed, consider running cleanup..."
          echo "This step could include:"
          echo "- Rolling back to previous version"
          echo "- Cleaning up failed resources"
          echo "- Sending failure notifications"