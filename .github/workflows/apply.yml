name: 'Terraform Apply'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, staging, prod)'
        required: true
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_apply:
        description: 'Type "APPLY" to confirm deployment'
        required: true
        type: string
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: string
      skip_confirmation:
        description: 'Skip confirmation check (for automated deployments)'
        required: false
        type: boolean
        default: false
    secrets:
      ROLE_TO_ASSUME:
        required: true

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  validate-input:
    name: 'Validate Input'
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        if: ${{ !inputs.skip_confirmation && inputs.confirm_apply != 'APPLY' }}
        run: |
          echo "::error::You must type 'APPLY' to confirm deployment"
          exit 1

      - name: Validate environment
        run: |
          if [[ ! "${{ inputs.environment }}" =~ ^(dev|staging|prod)$ ]]; then
            echo "::error::Invalid environment: ${{ inputs.environment }}"
            exit 1
          fi

  terraform-apply:
    name: 'Terraform Apply - ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    needs: validate-input
    environment: ${{ inputs.environment }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./environments/${{ inputs.environment }}
    
    env:
      TF_VAR_public_key: ${{ secrets.EC2_SSH_PUBLIC_KEY }}
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5.0

      - name: Setup Terragrunt
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.55.1/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Cache Terragrunt modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.terragrunt-cache
            .terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ inputs.environment }}-${{ hashFiles('**/terragrunt.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-${{ inputs.environment }}-
            ${{ runner.os }}-terragrunt-

      - name: Download Plan Artifact (if available)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: terraform-plan-${{ inputs.environment }}
          path: ./environments/${{ inputs.environment }}

      - name: Terragrunt Init
        run: terragrunt init

      - name: Terragrunt Format Check
        run: terragrunt hclfmt --terragrunt-check

      - name: Terraform Format Check
        run: terragrunt fmt -check -recursive

      - name: Terragrunt Validate
        run: terragrunt validate

      - name: Terragrunt Plan (Pre-Apply Check)
        id: plan
        run: |
          # If we have a saved plan, use it; otherwise create a new one
          if [ -f "plan.tfplan" ]; then
            echo "Using existing plan from artifact"
            terragrunt show -no-color plan.tfplan
          else
            echo "Creating new plan for apply"
            terragrunt plan -out=plan.tfplan -no-color
          fi

      - name: Terragrunt Apply
        id: apply
        run: |
          echo "::group::Applying Terraform configuration for ${{ inputs.environment }}"
          terragrunt apply -input=false -auto-approve plan.tfplan
          echo "::endgroup::"

      - name: Terragrunt Output
        id: output
        run: |
          echo "::group::Terraform Outputs"
          terragrunt output -json > /tmp/terraform-outputs-${{ inputs.environment }}.json
          terragrunt output
          echo "::endgroup::"

      - name: Upload Apply Results
        uses: actions/upload-artifact@v3
        with:
          name: terraform-apply-results-${{ inputs.environment }}
          path: |
            /tmp/terraform-outputs-${{ inputs.environment }}.json
          retention-days: 90

      - name: Notify Success
        if: success()
        run: |
          echo "::notice::Terraform apply completed successfully for ${{ inputs.environment }} environment"

      - name: Notify Failure
        if: failure()
        run: |
          echo "::error::Terraform apply failed for ${{ inputs.environment }} environment"
          exit 1