name: 'Terraform Plan'

on:
  pull_request:
    paths:
      - 'environments/**'
      - 'modules/**'
      - '*.hcl'
      - 'mise.toml'
      - '.mise.toml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan (dev, staging, prod)'
        required: true
        type: choice
        options:
        - dev
        - staging
        - prod
  workflow_call:
    inputs:
      environment:
        description: 'Environment to plan'
        required: true
        type: string
    secrets:
      ROLE_TO_ASSUME:
        required: true

permissions:
  contents: read
  id-token: write
  actions: read
  pull-requests: write  # For PR comments

env:
  # Set environment based on workflow trigger
  ENVIRONMENT: ${{ inputs.environment || 'dev' }}
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

jobs:
  validate-environment:
    name: 'Validate Environment'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          ENV="${{ inputs.environment }}"
          if [ -z "$ENV" ]; then
            # For PR events, determine environment from changed files or default to dev
            ENV="dev"
          fi
          
          if [[ ! "$ENV" =~ ^(dev|staging|prod)$ ]]; then
            echo "::error::Invalid environment: $ENV"
            exit 1
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Planning for environment: $ENV"

  terragrunt-checks:
    name: 'Terragrunt Validation'
    runs-on: ubuntu-latest
    needs: validate-environment
    
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Create OpenTofu Plugin Cache Dir'
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: 'OpenTofu Plugin Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-plugin-cache-

      - name: 'Cache Terragrunt modules'
        uses: actions/cache@v4
        with:
          path: |
            ~/.terragrunt-cache
            .terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ needs.validate-environment.outputs.environment }}-${{ hashFiles('**/terragrunt.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-${{ needs.validate-environment.outputs.environment }}-
            ${{ runner.os }}-terragrunt-

      # Check Terragrunt HCL formatting
      - name: 'Check Terragrunt HCL Format'
        uses: gruntwork-io/terragrunt-action@v3
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        with:
          tg_dir: 'environments/${{ needs.validate-environment.outputs.environment }}'
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

      # Validate Terragrunt configuration
      - name: 'Validate Terragrunt Configuration'
        uses: gruntwork-io/terragrunt-action@v3
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        with:
          tg_dir: 'environments/${{ needs.validate-environment.outputs.environment }}'
          tg_command: 'validate-all'

  terraform-plan:
    name: 'Terraform Plan - ${{ needs.validate-environment.outputs.environment }}'
    runs-on: ubuntu-latest
    needs: [validate-environment, terragrunt-checks]
    environment: ${{ needs.validate-environment.outputs.environment }}
    
    env:
      TF_VAR_public_key: ${{ secrets.EC2_SSH_PUBLIC_KEY }}
    
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: 'Create OpenTofu Plugin Cache Dir'
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: 'OpenTofu Plugin Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-plugin-cache-

      - name: 'Cache Terragrunt modules'
        uses: actions/cache@v4
        with:
          path: |
            ~/.terragrunt-cache
            .terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ needs.validate-environment.outputs.environment }}-${{ hashFiles('**/terragrunt.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-${{ needs.validate-environment.outputs.environment }}-
            ${{ runner.os }}-terragrunt-

      # Initialize Terragrunt
      - name: 'Terragrunt Init'
        uses: gruntwork-io/terragrunt-action@v3
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        with:
          tg_dir: 'environments/${{ needs.validate-environment.outputs.environment }}'
          tg_command: 'init'

      # Run Terraform format check
      - name: 'Terraform Format Check'
        uses: gruntwork-io/terragrunt-action@v3
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        with:
          tg_dir: 'environments/${{ needs.validate-environment.outputs.environment }}'
          tg_command: 'fmt -check -recursive'

      # Generate Terraform plan
      - name: 'Terragrunt Plan'
        id: plan
        uses: gruntwork-io/terragrunt-action@v3
        env:
          TF_PLUGIN_CACHE_DIR: ${{ env.TF_PLUGIN_CACHE_DIR }}
        with:
          tg_dir: 'environments/${{ needs.validate-environment.outputs.environment }}'
          tg_command: 'plan -out=plan.tfplan'
          tg_comment: 1  # Enable PR comments
          github_token: ${{ github.token }}

      # Save plan for apply workflow
      - name: 'Save Plan Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ needs.validate-environment.outputs.environment }}
          path: |
            environments/${{ needs.validate-environment.outputs.environment }}/plan.tfplan
            environments/${{ needs.validate-environment.outputs.environment }}/.terraform
            environments/${{ needs.validate-environment.outputs.environment }}/.terraform.lock.hcl
          retention-days: 5

      # Generate plan summary for output
      - name: 'Plan Summary'
        if: always()
        run: |
          cd environments/${{ needs.validate-environment.outputs.environment }}
          
          echo "## Terraform Plan Summary for ${{ needs.validate-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "plan.tfplan" ]; then
            # Show plan summary using terragrunt
            echo '```' >> $GITHUB_STEP_SUMMARY
            terragrunt show -json plan.tfplan | jq -r '.resource_changes[] | select(.change.actions[] | contains("create", "update", "delete")) | "\(.change.actions[0]): \(.address)"' >> $GITHUB_STEP_SUMMARY || echo "Plan created successfully" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Plan generation failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 'Notify Success'
        if: success()
        run: |
          echo "::notice::Terraform plan completed successfully for ${{ needs.validate-environment.outputs.environment }} environment"

      - name: 'Notify Failure'
        if: failure()
        run: |
          echo "::error::Terraform plan failed for ${{ needs.validate-environment.outputs.environment }} environment"